data_cipher.py

from cryptography.fernet import Fernet

class DataCipher:
    def __init__(self, key):
        self.fernet = Fernet(key)

    def encrypt(self, data):
        return self.fernet.encrypt(data.encode()).decode()

    def decrypt(self, data):
        return self.fernet.decrypt(data.encode()).decode()
    

database_connection.py

import psycopg2

class DatabaseConnection:
    def __init__(self, dsn):
        self.dsn = dsn
        self.conn = None

    def __enter__(self):
        self.conn = psycopg2.connect(self.dsn)
        return self.conn

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.conn.close()



user_data_operations.py

def extract_users(conn):
    with conn.cursor() as cur:
        cur.execute("SELECT username, created_at FROM users")
        return cur.fetchall()

def insert_users(conn, user_data):
    with conn.cursor() as cur:
        cur.executemany(
            "INSERT INTO users (username, created_at) VALUES (%s, %s)",
            user_data
        )
        conn.commit()

def count_users(conn):
    with conn.cursor() as cur:
        cur.execute("SELECT COUNT(*) FROM users")
        return cur.fetchone()[0]

main.py

import os
import glob
import time
from data_cipher import DataCipher
from database_connection import DatabaseConnection
from user_data_operations import extract_users, insert_users, count_users
from metrics import calculate_metrics, log_and_save_metrics
from utils import get_key_from_file


# Get the most recently modified file in the directory
files = glob.glob('C:/Users/akhal/OneDrive/Desktop/Projects/minsta/Key_management/Keys/*.*')
latest_file = max(files, key=os.path.getmtime)
key = get_key_from_file(latest_file)

print(f"Key used: {key}, from file: {latest_file}")

cipher = DataCipher(key)

source_dsn = "dbname=ig_clone user=postgres password=easypass host=localhost"
destination_dsn = "dbname=Minsta user=postgres password=easypass host=localhost"

start_time = time.time()

# Extract data from source database
with DatabaseConnection(source_dsn) as source_conn:
    user_data = extract_users(source_conn)
    original_table_size = count_users(source_conn)

# Encrypt the data
encryption_start_time = time.time()
encrypted_user_data = [
    (cipher.encrypt(username), created_at)
    for username, created_at in user_data
]
encryption_end_time = time.time()

# Insert encrypted data into destination database
with DatabaseConnection(destination_dsn) as destination_conn:
    insert_users(destination_conn, encrypted_user_data)
    encrypted_table_size = count_users(destination_conn)

end_time = time.time()

overhead, encryption_speed = calculate_metrics(start_time, end_time, user_data, encryption_start_time, encryption_end_time)

log_and_save_metrics(overhead, original_table_size, encrypted_table_size, encryption_speed, 'C:\\Users\\akhal\\OneDrive\\Desktop\\Projects\\minsta\\Middleware0\\Analysis\\metrics.csv')

metrics.py

# metrics.py

import csv

def calculate_metrics(start_time, end_time, user_data, encryption_start_time, encryption_end_time):
    overhead = end_time - start_time
    encryption_speed = len(user_data) / (encryption_end_time - encryption_start_time)
    return overhead, encryption_speed

def save_metrics_to_csv(metrics, filename):
    with open(filename, 'w', newline='') as csvfile:
        fieldnames = ['Overhead', 'Original Table Size', 'Encrypted Table Size', 'Encryption Speed']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

        writer.writeheader()
        writer.writerow(metrics)

def log_and_save_metrics(overhead, original_table_size, encrypted_table_size, encryption_speed, filename):
    metrics = {
        'Overhead': overhead,
        'Original Table Size': original_table_size,
        'Encrypted Table Size': encrypted_table_size,
        'Encryption Speed': encryption_speed
    }

    save_metrics_to_csv(metrics, filename)

    print(f"Data transfer completed in {overhead} seconds")
    print(f"Original table size: {original_table_size} rows")
    print(f"Encrypted table size: {encrypted_table_size} rows")
    print(f"Encryption speed: {encryption_speed} rows/second")


ig_clone.py

import psycopg2
from user_data_operations import insert_users
import time

key = 'q4Zj1rj9w1piWQ41SEE9u7UIFldRxySayKU-_qU4lK0='  
cipher = DataCipher(key)

# Define the connection parameters for the source and destination databases
source_dsn = "dbname=ig_clone user=postgres password=easypass host=localhost"
destination_dsn = "dbname=Minsta user=postgres password=easypass host=localhost"

# Connect to the source database and fetch the data
with psycopg2.connect(source_dsn) as source_conn:
    with source_conn.cursor() as source_cur:
        source_cur.execute("SELECT username, created_at FROM users")
        user_data = source_cur.fetchall()

# Encrypt the data
encrypted_user_data = [
    (cipher.encrypt(username), cipher.encrypt(created_at))
    for username, created_at in user_data
]

# Connect to the destination database and insert the encrypted data
with psycopg2.connect(destination_dsn) as destination_conn:
    start_time = time.time()
    insert_users(destination_conn, cipher, encrypted_user_data)
    end_time = time.time()
    print(f"Inserted all users in {end_time - start_time} seconds")

decrypt.py

import random
import glob
import os
from data_cipher import DataCipher
from database_connection import DatabaseConnection
from utils import get_key_from_file

# Get the most recently modified key file in the directory
files = glob.glob('C:/Users/akhal/OneDrive/Desktop/Projects/minsta/Key_management/Keys/*.*')
latest_file = max(files, key=os.path.getmtime)
key = get_key_from_file(latest_file)

cipher = DataCipher(key)

destination_dsn = "dbname=Minsta user=postgres password=easypass host=localhost"

# Fetch data from destination database
with DatabaseConnection(destination_dsn) as destination_conn:
    cursor = destination_conn.cursor()
    cursor.execute("SELECT * FROM users;")
    user_data = cursor.fetchall()

# Select a random row
random_row = random.choice(user_data)

# Decrypt the username
decrypted_username = cipher.decrypt(random_row[1])  # assuming the username is in the second column

print(f"Decrypted username: {decrypted_username}")

utils.py

def get_key_from_file(filepath):
    with open(filepath, 'rb') as file:
        key = file.read()
    return key
